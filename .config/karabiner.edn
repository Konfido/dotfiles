; Ref 1 -> https://github.com/yqrashawn/GokuRakuJoudo
; Ref 2 -> https://pqrs.org/osx/karabiner/json.html

; Rule 1: Aviod vowels in simlayer (causing typing delay)
; Rule 2: Use "whether alone" as little as possible
; Rule 3: Lay app-specific settings ahead universal ones when using same trigger key
; Rule 4: Put "Whether alone" at the end of all the rules

; Note 1: f20 means doing nothing
; Note 2: The lazy modifier does not send own key events until another key is pressed together.
; Note 3: CS(Command+Shift) relates to systems or brower settings.

{ :templates  { :launch "osascript -e 'tell application \"Alfred 3\" to run trigger \"launch%s\" in workflow \"yqrashawn.workflow.launcher\" with argument \"\"'"
                :2do    "open 'twodo://x-callback-url/%s'"
                ;:km     "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
                :open   "open \"%s\""
                }
  :layers     { :Spacebar-Mode {:key :spacebar :afterup [{:set ["Spacebar-Mode" 0]}]}
                ;:tab-mode {:key :tab :afterup [{:set ["chunkwm-move-mode" 0]}
                ;                               {:set ["chunkwm-scale-mode" 0]}]}
                ;:chunkwm-move-mode {:key :f :condi :tab-mode}
                ;:chunkwm-scale-mode {:key :c :condi :tab-mode}
                ;:chunkwm-insert-mode {:key :i :condi :tab-mode}
                ;:period-mode {:key :period :afterup {:set ["period-comma-mode" 0]}}}
                ;:caps_lock-mode {:key :caps_lock :afterup ["caps_lock-mode" 0]}
                }
  :simlayers  { :Launch-W-Mode  {:key :w}
                :Hyper-Q-Mode   {:key :q}
                :Vi-V-Mode      {:key :v}
                :Symbol-S-Mode  {:key :s}
                :Symbol-P-Mode  {:key :p}
                :Search-0-Mode  {:key :0}
                :caps_lock-mode {:key :caps_lock}
                :2do-S-mode     {:key :s :condi :2do}
                :2do-d-mode     {:key :d :condi :2do}
                ;:tmux-windmove-mode {:key :q :condi :Terminals}
                ;:vi-visual-mode {:key :v :condi :!vim-mode-disabled-application}
                }

  :main [
          { :des "test"
            :rules  [
                      ;[:d :d nil {:held :delete_or_backspace}]
                      ;[:##tab :tab nil {:alone :escape :held :mission_control :paras {:alone :50 :held :250}}]
                      ;[[:h :l] [:alf "m" "com.folded-paper.menu-bar-search"]]
                      ;[[:j :l] [:f19 ["in-alfred" 1]]]
                      ]}
          { :des "Simple app-specific customization"
            :rules  [
                      [:h :!TCh :Preview]               ; highlight
                      [:caps_lock [:escape :escape :escape] :Safari]  ; Jump out of address bar
                      [:!Sx :!CSt :Safari]              ; reopen closed tab in Safari
                      [:!Sj :!CSopen_bracket :Safari]   ; previous tab in Safari
                      [:!Sk :!CSclose_bracket :Safari]  ; next tab in Safari
                      ;[:!Cw :!Cm :Music]               ; Command+W to hide instead of quitting
                      [:!O1 :!TC3 :Typora]              ; File Tree
                      [:!O2 :!TC1 :Typora]              ; TOC
                      ]}
          { :des "Complex & Simultaneous keys"
            :rules  [
                      [:!CSl :!CTq]                    ; Command+L to Lock
                      [[:j :k] :return_or_enter]
                      ;[[:d :f] :delete_or_backspace]
                      ]}
          { :des "Quit application only when tapping command-q twice"
            :rules  [
                      [:!C#Pq [:!Cq ["command-q" 0]] ["command-q" 1]]
                      [:!C#Pq ["command-q" 1] nil {:delayed {:invoked ["command-q" 0] :canceled ["commandq" 0]}}]
                      ]}
          { :des "Launch-W-Mode"
            :rules  [ :Launch-W-Mode
                      [:b [:open "/Applications/MWeb.app"]]                  ; Blog
                      [:c [:open "/Applications/Visual Studio Code.app"]]    ; code
                      [:e [:open "/Applications/Mail.app"]]
                      [:f [:open "/System/Library/CoreServices/Finder.app"]]
                      [:g [:open "/Applications/Safari.app"]]
                      [:k [:open "/Applications/Karabiner-EventViewer.app"]]
                      [:m [:open "/Users/dhh/Applications/Chrome Apps.localized/豆瓣FM.app"]]; music
                      [:p [:open "/Applications/Preview.app"]]
                      [:r [:open "/Users/dhh/Applications/Chrome Apps.localized/Default kioamkhegjdpcigakoadgkbhhboakpcc.app"]]
                      [:t [:open "/Applications/iTerm.app"]]
                      [:v [:open "/Applications/WeChat.app"]]
                      [:y [:open "/Applications/Nutstore.app"]]
                      [:tab [:2do "showToday"]]                              ; 2do
                      [:comma [:open "/Applications/System Preferences.app"]]
                      [:semicolon [:open "/Applications/Safari.app"]]
                      [:spacebar [:open "/Applications/Zotero.app"]]         ; Zotero
                      [:left_command [:open "/Applications/Typora.app"]]     ; Typora
                      #_[:equal_sign [:open "/Applications/Textual.app"]]    ; IRC chat
                      #_[:period [:open "/Applications/Paw.app"]]            ; API tool
                      #_[:j [:open "/Applications/Alacritty.app"]]
                      #_[:b [:open "/Applications/Bee.app"]]                 ; issue tracker
                      ]}
          { :des "Hyper-Q-Mode"
            :rules  [ :Hyper-Q-Mode
                      [:b :!!b]                     ; Bartender
                      [:f :!TSf]                    ; Change input source to Traditional Chinese
                      [:j :!!j]                     ; Tomato Clock, Hyper j
                      [:r :!SOr :Chrome]            ; Toggle "Clearly" (ReadMode)
                      #_[:t :!Oa]                   ; Add item to 2Do
                      [:t :!!t]                     ; Show/Hide iTerm2
                      ]}
          { :des "Search-0-Mode"
            :rules  [ :Search-0-Mode
                      [:b :!OSf]                    ; Global search of blog
                      [:f :!Of]                     ; call Alfred to search selected word in google translation
                      [:v :!Ov]                     ; call Alfred to show clipboard history in Alfred
                      ]}
          { :des "caps_lock-mode [map to ctrl]"
            :rules  [ :caps_lock-mode
                      [:a :!Ta]                     ; ctrl a, start of sentence
                      [:c :!Tc]                     ; ctrl c
                      [:d :!Td]                     ; ctrl d
                      [:e :!Te]                     ; ctrl e, end of sentence
                      [:k :!Tk]                     ; ctrl k, delete to the end
                      [:w :!Tw]                     ; ctrl w, delete the word before cursor
                      ]}
          { :des "Vimium-Mode"
            :rules  [
                      [:!CSi ["vimium" 1]]                            ; enter Vimium mode
                      [:tab [:escape ["vimium" 0]] ["vimium" 1]]      ; exit Vimium mode
                      ;[:button1 [:button1 ["vimium" 0]] ["vimium" 1]]   ; TODO: Why this don't work?
                      [:j :up_arrow ["vimium" 1]]
                      [:k :down_arrow ["vimium" 1]]
                      [:h :left_arrow ["vimium" 1]]
                      [:l :right_arrow ["vimium" 1]]
                      ]}
          { :des "Vi-V-Mode"
            :rules  [ :Vi-V-Mode
                      [:c :!Cc]                      ; copy
                      [:x :!Cx]                      ; cut
                      [:z :!Cz]                      ; undo
                      [:d :delete_or_backspace]      ; delete
                      [:w :!Cdelete_or_backspace]    ; command delete
                      [:spacebar :return_or_enter]   ; enter
                      [:k :down_arrow {:held ["vimium" 0]}]
                      [:i :up_arrow {:held ["vimium" 0]}]
                      [:j :left_arrow ]
                      [:l :right_arrow ]
                      [:h :!Oleft_arrow]
                      [:semicolon :!Oright_arrow]
                      [:u :!Ta]                      ; beginning of sentence
                      [:o :!Te]                      ; end of sentence
                      ]}
          { :des "Spacebar-Mode: mouse & system settings"
            :rules  [ :Spacebar-Mode
                      ; ### mouse scroll and pointer ###
                      [:j {:mkey {:hwheel 50}}]      ; mouse-scroll
                      [:l {:mkey {:hwheel -50}}]
                      [:i {:mkey {:vwheel 50}}]
                      [:k {:mkey {:vwheel -50}}]
                      [:!Sj {:mkey {:x -1546}}]      ; mouse-cursor
                      [:!Sl {:mkey {:x 1546}}]
                      [:!Si {:mkey {:y -1546}}]
                      [:!Sk {:mkey {:y 1546}}]
                      [:#Ss {:mkey {:speed 0.5}}]    ; slower
                      [:#Sa {:mkey {:speed 2.0}}]    ; faster
                      ;[:#Sh {:pkey :button1}]        ; left click
                      [:#Sh :button1]                 ; left click
                      [:#Sn :button2]                 ; right click
                      ; ### system settings ###
                      [:d :!OCd]                     ; hide/show dock
                      [:b :!SCb :Chrome]              ; hide/show Chrome's bookmark bar
                      [:f :!TCf]                     ; full screen
                      [:w :!Ow]                       ; move windows by Moom
                      ;[:t [:!Ot [:open "/Applications/iTerm.app"]]]  ; open terminal in ubuntu
                      [:grave_accent_and_tilde :launchpad]            ; mission control
                      [:tab :mission_control]                         ; launchpad
                      [:comma [:open "/Applications/System Preferences.app"]]
                      [:backslash :mute]             ; mute
                      [:open_bracket :volume_down]   ; volume down
                      [:close_bracket :volume_up]    ; volume up
                      [:!Oopen_bracket :!OSvolume_down]      ; 1/4 volume down
                      [:!Oclose_bracket :!OSvolume_up]       ; 1/4 volume up
                      [:3 :!CS3]                     ; screen shot
                      [:4 :!CS4]                     ; screen shot
                      [:1 :!TStab :Finder]           ; previous tab in Finder
                      [:2 :!Ttab :Finder]            ; next tab in Finder
                      [:1 :!CSopen_bracket :Safari]   ; previous tab in Safari
                      [:2 :!CSclose_bracket :Safari]  ; next tab in Safari
                      [:1 :!Tpage_up]                ; Previous tab
                      [:2 :!Tpage_down]              ; Next tab
                      ]}
          { :des "2do-S-mode [inside 2do]"
            :rules  [ :2do-S-mode
                      [:i [:!Cup_arrow]]             ; list up
                      [:k [:!Cdown_arrow]]           ; list down
                      [:h [:!Ck]]                    ; hide/show scheduled
                      ;[:i [:!C0]]                   ; inbox
                      [:l [:!TSCn]]                  ; add selection to checklist
                      [:a [:!C1]]                    ; all
                      [:t [:!C2]]                    ; today
                      [:s [:!C3]]                    ; stared
                      [:v [:!C4]]                    ; scheduled
                      [:d [:!C5]]                    ; done
                      ]}
          { :des "Symbol-P-Mode"
            :rules  [ :Symbol-P-Mode
                      ;[:comma ["period-comma-mode" 1] nil {:alone :comma :afterup ["period-comma-mode" 0]}]
                      [:e :!Sopen_bracket]           ; {
                      [:r :!Sclose_bracket]          ; }
                      [:d :open_bracket]             ; [
                      [:f :close_bracket]            ; ]
                      [:c :!S9]                      ; (
                      [:v :!S0]                      ; )
                      [:h [:!Sgrave_accent_and_tilde :slash]]        ; ~/  home
                      [:t [:slash :slash :spacebar :!St :!So :!Sd :!So :!Ssemicolon :spacebar]] ; // TODO:
                      [:s [:period :!S8]]            ; * star
                      [:w [:!Sslash]]                ; ?
                      [:1 :!S1]                      ;
                      [:2 :!S2]
                      [:3 :!S3]
                      [:4 :!S4]
                      [:5 :!S5]
                      ]}
          { :des "Symbol-S-Mode"
            :rules  [ :Symbol-S-Mode
                      [:t :!S1]                      ; !
                      [:slash :!Sslash]              ; ?
                      [:semicolon :!Ssemicolon]      ; :
                      [:p :slash]                    ; /
                      [:d :open_bracket]             ; [
                      [:f :close_bracket]            ; ]
                      [:9 :!S9]                      ; (
                      [:0 :!S0]                      ; )
                      [:b :!Sgrave_accent_and_tilde] ; ~
                      [:j :hyphen]                   ; -
                      [:k :!Sequal_sign]             ; +
                      [:6 :!S6]                      ; ^
                      [:8 :!S8]                      ; *
                      ; [:a :!S7]                    ; & and
                      [:e :equal_sign]               ; = equal
                      [:q :quote]                    ; ' quote
                      [:quote :!Squote]              ; "
                      ; [:h :!S3]                    ; # harsh
                      [:l :!Scomma ]                 ; < less
                      [:g :!Speriod]                 ; > greater
                      [:u :!Shyphen]                 ; _ underline
                      ]}
          #_{ :des "Vi Visual Mode [V as Trigger Key]"
            :rules  [ :vi-visual-mode
                      [:d :delete_or_backspace]
                      [:##j :!Sdown_arrow]
                      [:##k :!Sup_arrow]
                      [:##h :!Sleft_arrow]
                      [:##l :!Sright_arrow]
                      [:##b :!SOleft_arrow]
                      [:##w :!SOright_arrow]
                      [:##0 :!SCleft_arrow]
                      [:##4 :!SCright_arrow]
                      [:##open_bracket :!SOup_arrow ]
                      [:##close_bracket :!SOdown_arrow]
                      ]}
          #_{ :des "window move"
            :rules  [ :tmux-wi ndmove-mode
                      [:comma [:!Tq :comma]]
                      [:open_bracket [:!Tq :open_bracket]]
                      [:y [:!Tq :y]]
                      [:f [:!Tq :f]]
                      [:e [:!Tq :e]]
                      [:w [:!Tq :w]]
                      [:h [:!Tq :h]]
                      [:j [:!Tq :j]]
                      [:k [:!Tq :k]]
                      [:l [:!Tq :l]]
                      [:v [:!Tq :v]]
                      [:s [:!Tq :s]]
                      [:m [:!Tq :z]]
                      [:b [:!Tq :x]]
                      [:c [:!Tq :c]]
                      [:1 [:!Tq :1]]
                      [:2 [:!Tq :2]]
                      [:3 [:!Tq :3]]
                      [:4 [:!Tq :4]]
                      [:5 [:!Tq :5]]]}
          #_{ :des "chunkwm mode"
            :rules  [
                      [:!COSf "/usr/local/bin/chunkc tiling::window --toggle native-fullscreen"]
                      :chunkwm-insert-mode
                      [:spacebar "/usr/local/bin/chunkc tiling::window --use-insertion-point cancel"]
                      [:h "/usr/local/bin/chunkc tiling::window --use-insertion-point west"]
                      [:j "/usr/local/bin/chunkc tiling::window --use-insertion-point south"]
                      [:k "/usr/local/bin/chunkc tiling::window --use-insertion-point north"]
                      [:l "/usr/local/bin/chunkc tiling::window --use-insertion-point east"]
                      :chunkwm-move-mode
                      ;; move windows
                      [:h "/usr/local/bin/chunkc tiling::window --warp west"]
                      [:j "/usr/local/bin/chunkc tiling::window --warp south"]
                      [:k "/usr/local/bin/chunkc tiling::window --warp north"]
                      [:l "/usr/local/bin/chunkc tiling::window --warp east"]
                      :chunkwm-scale-mode
                      ;; scale windows
                      [:h "~/local/bin/chunkwm-resize left"]
                      [:j "~/local/bin/chunkwm-resize down"]
                      [:k "~/local/bin/chunkwm-resize up"]
                      [:l "~/local/bin/chunkwm-resize right"]
                      ;; equalize size of windows
                      [:spacebar "/usr/local/bin/chunkc tiling::desktop --equalize"]
                      :tab-mode
                      [:return_or_enter "~/local/bin/chunkwm-change-mode"]
                      [:grave_accent_and_tilde "/usr/local/bin/brew services restart chunkwm"]
                      ;; change gap setting, reload chunkwmrc
                      [:backslash "~/local/bin/chunkwm-gaps 10 10 5 5 7.5"]
                      [:h "/usr/local/bin/chunkc tiling::window --focus west"]
                      [:j "/usr/local/bin/chunkc tiling::window --focus south"]
                      [:k "/usr/local/bin/chunkc tiling::window --focus north"]
                      [:l "/usr/local/bin/chunkc tiling::window --focus east"]
                      [:n "/usr/local/bin/chunkc tiling::window --focus next"]
                      [:p "/usr/local/bin/chunkc tiling::window --focus prev"]
                      ;; rotate windows clockwise and anticlockwise
                      [:r "/usr/local/bin/chunkc tiling::desktop --rotate 90"]
                      [:!Sr "/usr/local/bin/chunkc tiling::desktop --rotate 270"]
                      ;; rotate on x and y axis
                      [:y "/usr/local/bin/chunkc tiling::desktop --mirror vertical"]
                      [:!Sy "/usr/local/bin/chunkc tiling::desktop --mirror horizontal"]
                      [:spacebar "/usr/local/bin/chunkc tiling::window --toggle fullscreen"]
                      [:a "/usr/local/bin/chunkc tiling::window --toggle float"]
                      [:b "/usr/local/bin/chunkc tiling::desktop --layout bsp"]
                      [:m "/usr/local/bin/chunkc tiling::desktop --layout monocle"]
                      [:x "/usr/local/bin/chunkc tiling::window --close"]
                      [:delete_or_backspace "/usr/local/bin/chunkc tiling::window --close"]
                      [:open_bracket "/usr/local/bin/chunkc tiling::window --send-to-monitor prev"]
                      [:close_bracket "/usr/local/bin/chunkc tiling::window --send-to-monitor next"]
                      ]}
          #_{ :des "Capital-Mode/;->right_shift [semicolon as trigger key]"
            :rules  [ :Capital-Mode
                      [:q :!Sq]
                      [:w :!Sw]
                      [:e :!Se]
                      [:r :!Sr]
                      [:t :!St]
                      [:y :!Sy]
                      [:u :!Su]
                      [:i :!Si]
                      [:o :!So]
                      [:p :!Sp]
                      [:a :!Sa]
                      [:s :!Ss]
                      [:d :!Sd]
                      [:f :!Sf]
                      [:g :!Sg]
                      [:h :!Sh]
                      [:j :!Sj]
                      [:k :!Sk]
                      [:l :!Sl]
                      [:z :!Sz]
                      [:x :!Sx]
                      [:c :!Sc]
                      [:v :!Sv]
                      [:b :!Sb]
                      [:n :!Sn]
                      [:m :!Sm]
                      ]}
          { :des "Whether alone?"
            :rules  [
                      [:##right_shift :right_shift nil {:alone :!Tspacebar}]   ; switch input source
                      [:grave_accent_and_tilde {:grave_accent_and_tilde :lazy} nil {:alone :!SOgrave_accent_and_tilde}]
                                                                            ; force inputting accent sign under chinese input methods
                      ;[:tab {:tab :lazy} nil {:alone :escape}]             ; tab -> escape/hyper(⌘⌥⌃⇧)
                      ;[:caps_lock {:f20 :lazy} nil {:alone :escape}]        ; caps_lock -> ⌃/escape; under effect of caps_lock-mode
                      [:caps_lock {:f20 :lazy} nil {:alone [:escape ["vimium" 0]]}] ; jump out of inputting
                      ;[:##tab [:left_control :left_option :left_command :left_shift] nil {:alone :escape}]     ; escape/hyper(⌘⌥⌃⇧)
                      ]}
                      ]

  :devices        {
                    :macbook-internal [{:product_id 635 :vendor_id 1452}]
                    :ikbc             [{:vendor_id 394 :product_id 1241}]
                    }
  :applications   {
                    :2do        [ "^com\\.guidedways\\.TodoMac.*" ]
                    :Safari     [ "^com\\.apple\\.Safari$"  ]
                    :Chrome     [ "^com\\.google\\.Chrome$"]
                    :Browsers   [ "^org\\.mozilla\\.firefox$"
                                  "^com\\.google\\.Chrome$"
                                  "^com\\.apple\\.Safari$"  ]
                    :Finder     [ "^com\\.apple\\.finder$"  ]
                    :irreader   [ "^com\\.netqon\\.likefeeder$" ]
                    ;:Music      [ "^com.\\google\\.Chrome\\.app\\.Default-hcnmcnkcapjmodbajnmaonhjpmhedold"]
                    :Preview    [ "^com\\.apple\\.Preview"  ]
                    :Terminals  [ "^com\\.apple\\.Terminal$"
                                  "^com\\.googlecode\\.iterm2$"
                                  "^co\\.zeit\\.hyperterm$"
                                  "^co\\.zeit\\.hyper$"
                                  "^io\\.alacritty$"
                                  "^net\\.kovidgoyal\\.kitty$"  ]
                    :Typora     [ "^abnerworks\\.Typora"]
                    :vim-mode-disabled-application
                                [ "^com\\.apple\\.Terminal$"
                                  "^com\\.googlecode\\.iterm2$"
                                  "^co\\.zeit\\.hyperterm$"
                                  "^co\\.zeit\\.hyper$"
                                  "^io\\.alacritty$"
                                  "^net\\.kovidgoyal\\.kitty$"
                                  "^org\\.vim\\."
                                  "^com\\.qvacua\\.VimR$" ]
                    }
  :input-sources  {
                    :sogou  { :input_mode_id "com.sogou.inputmethod.pinyin"
                              :input_source_id "com.sogou.inputmethod.sogou.pinyin"
                              :language "zh-Hans"}
                    :us     { :input_mode_id ""
                              :input_source_id "com.apple.keylayout.ABC"
                              :language "en"}
                    }}
