; Ref 1 -> https://github.com/yqrashawn/GokuRakuJoudo
; Ref 2 -> https://pqrs.org/osx/karabiner/json.html

; Suggest 1: Aviod vowels in simlayer (causing input delay)
; Suggest 2: Define "whether alone" as little as possible adn put them at the end of the whole rules.
; Suggest 3: Lay app-specific settings ahead universal ones when using same trigger key
; Suggest 4: Try to simulate a general logic and bind same keys for same functions among Apps
;            (eg, navigating set/list/items/tabs/windows).

; Note 1: f20 means doing nothing
; Note 2: The lazy modifier does not send own key events until another key is pressed together.
; Note 3: Set {:doder :strict} to avoid combination-keys' invalidation over single key in simlayers.
;         For example, "space-shift-s" will deactivate "space-s" if "doder" not set to "strict" in "Spacebar-Mode"
; Note 4: "#" deactivate its nearby modifiers, while "##" pass through the modifiers to the results!
;         Which means, if you want "shift-x" works differently to "x" in a simlayer, "##" should be attached ahead.

{ :templates  { :2do    "open 'twodo://x-callback-url/%s'"
                ;:km     "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
                :open   "open \"%s\""
                }
  :layers     { :Spacebar-Mode  {:key :spacebar :afterup [{:set ["Spacebar-Mode" 0]}]}
                ;:2do-Space-mode {:key :spacebar :condi :2do :afterup [{:set ["2do-Space-Mode" 0]}]}
                ;:caps_lock-mode {:key :caps_lock :afterup ["caps_lock-mode" 0]}
                }
  :simlayers  { :Launch-W-Mode  {:key :w}
                :Hyper-Q-Mode   {:key :q}
                :Vi-V-Mode      {:key :v}
                ; :Symbol-S-Mode  {:key :s}
                :Symbol-P-Mode  {:key :p :upwhen :any}
                :Search-Alt-Mode  {:key :left_option}
                ; :caps_lock-mode {:key :caps_lock}
                :2do-Space-mode {:key :spacebar :condi :2do}
                :2do-d-mode     {:key :d :condi :2do}
                ; :tmux-windmove-mode {:key :q :condi :Terminals}
                ; :vi-visual-mode {:key :v :condi :!vim-mode-disabled-application}
                }
  :main [
          { :des "test"
            :rules  [
                      ;[:d :d nil {:held :delete_or_backspace}]
                      ;[:##tab :tab nil {:alone :escape :held :mission_control :paras {:alone :50 :held :250}}]
                      ;[[:h :l] [:alf "m" "com.folded-paper.menu-bar-search"]]
                      ;[[:j :l] [:f19 ["in-alfred" 1]]]
                      [:!Tspacebar :!Tspacebar :VSCode]
                      ]}
          { :des "App-Specific customization"
            :rules  [
                      [:h :!TCh :Preview]               ; highlight
                      ;[:caps_lock [:escape :escape :escape] :Browsers]  ; Jump out of address bar
                      ;[:return_or_enter [:return_or_enter :escape :escape :escape] :Safari]
                      [:!Sx :!CSt :Browsers]            ; reopen closed tab in browsers
                      [:!Cw :!Cm  :Spotify]             ; Command+W to hide instead of quitting
                      [:!Cw :!Cq  :iCal]                ; Command+W to quit
                      [:!O1 :!TC3 :Typora]              ; File Tree
                      [:!O2 :!TC1 :Typora]              ; TOC
                      [:!Chyphen :!TSgrave_accent_and_tilde :Typora]
                      [:!O1 :!Copen_bracket :iTerm2]    ; next split tab
                      [:!O2 :!Cclose_bracket :iTerm2]   ; previous split tab
                      [:!O2 :!COp :ForkLift]            ; Toggle dual panel
                      ]}
          { :des "Complex & Simultaneous keys"
            :rules  [
                      ;[:!CSl :!CTq]                    ; Lock Screen
                      [[:j :k] :return_or_enter]
                      ;[[:d :f] :delete_or_backspace]
                      ]}
          { :des "Quit application only when tapping command-q twice"
            :rules  [
                      [:!C#Pq [:!Cq ["command-q" 0]] ["command-q" 1]]
                      [:!C#Pq ["command-q" 1] nil {:delayed {:invoked ["command-q" 0] :canceled ["commandq" 0]}}]
                      ]}
          { :des "Launch-W-Mode"
            :rules  [ :Launch-W-Mode
                      [:b [:open "/Applications/MWeb.app"]]                  ; Blog
                      [:c [:open "/Applications/Visual Studio Code.app"]]    ; code
                      [:e [:open "/Applications/Mail.app"]]
                      [:f [:open "/Applications/ForkLift.app"]]
                      ;[:f [:open "/System/Library/CoreServices/Finder.app"]]
                      [:g [:open "/Applications/Safari.app"]]
                      [:k [:open "/Applications/Karabiner-EventViewer.app"]]
                      [:m [:open "/Applications/itunes.app"]]; music
                      [:p [:open "/Applications/Preview.app"]]
                      ; [:r [:open "/Users/dhh/Applications/Chrome Apps.localized/Inoreader.app"]]
                      [:r [:open "/Applications/Reeder.app"]]
                      [:t [:open "/Applications/iTerm.app"]]
                      [:v [:open "/Applications/WeChat.app"]]
                      [:y [:open "/Applications/Nutstore.app"]]
                      [:tab [:open "/Applications/Google Chrome.app"]]
                      [:caps_lock [:open "/Applications/Firefox.app"]]
                      [:comma [:open "/Applications/System Preferences.app"]]
                      [:semicolon [:open "/Applications/Safari.app"]]
                      [:spacebar [:open "/Applications/Zotero.app"]]         ; Zotero
                      [:left_command [:open "/Applications/Typora.app"]]     ; Typora
                      #_[:period [:open "/Applications/Paw.app"]]            ; API tool
                      #_[:b [:open "/Applications/Bee.app"]]                 ; issue tracker
                      ]}
          { :des "Hyper-Q-Mode"
            :rules  [ :Hyper-Q-Mode
                      ; App-specific
                      [:r :!SOc :Browsers]          ; Toggle "Read Mode" (Extension: Clearly)
                      [:d :!OSa :Browsers]          ; Toggle "Dark Reader" extension
                      ; Universal
                      [:f :!TSf]                    ; Change input source to Traditional Chinese
                      [:j :!!j]                     ; Tomato Clock, Hyper j
                      [:t [:open "/Applications/Transmit.app"]]
                      [:spacebar [:2do "showAll"]]  ; Show all tasks (2do)
                      ]}
          { :des "Search-Alt-Mode"
            :rules  [ :Search-Alt-Mode
                      ; [:f :!Of]                     ; translate selected words in Alfred
                      ; [:v :!Ov]                     ; search clipboard history in Alfred
                      ; [:s :!OCs]                    ; search snippet (Snippetslab)
                      [:b [[:open "/Applications/Typora.app"] :!CSf]]
                      ]}
          { :des "Vi-V-Mode"
            :rules  [ :Vi-V-Mode
                      [:z :!Cz]                       ; undo
                      [:d :delete_or_backspace]       ; delete
                      [:w :!Cdelete_or_backspace]     ; command delete
                      [:spacebar :return_or_enter]    ; enter
                      ;[:##i :f20]                     ; avoid mistake
                      [:##j :down_arrow]              ; down
                      [:##k :up_arrow]                ; up
                      [:##h :left_arrow ]             ; left
                      [:##l :right_arrow ]            ; right
                      ;[:!Si :page_up]                 ; page up
                      ;[:!Sk :page_down]               ; page down
                      ;[:h :!Oleft_arrow :VSCode]                  ; left word
                      ;[:semicolon :!Oright_arrow :VSCode]         ; right word
                      [:u :!Ta]                       ; beginning of sentence
                      [:o :!Te]                       ; end of sentence
                      ]}
          { :des "Spacebar-Mode: mouse & system settings"
            :rules  [ :Spacebar-Mode
                      ; mouse scroll and pointer
                      [:h {:mkey {:hwheel 50}}]       ; mouse-scroll
                      [:l {:mkey {:hwheel -50}}]
                      [:k {:mkey {:vwheel 50}}]
                      [:j {:mkey {:vwheel -50}}]
                      [:!Sj {:mkey {:x -1546}}]      ; mouse-cursor
                      [:!Sl {:mkey {:x 1546}}]
                      [:!Si {:mkey {:y -1546}}]
                      [:!Sk {:mkey {:y 1546}}]
                      [{:key :!Ss :dorder :strict} {:mkey {:speed 0.5}}]    ; slower
                      [{:key :!Sa :dorder :strict} {:mkey {:speed 2.0}}]    ; faster
                      [{:key :!Sh :dorder :strict} :button1]                ; left click
                      [{:key :!Sn :dorder :strict} :button2]                ; right click

                      ; App-specific
                      [:s :!TSs :Browsers]              ; Toggle Code Tree in Github by Octotree
                      [:1 :!CSopen_bracket :Browsers]   ; go previous
                      [:2 :!CSclose_bracket :Browsers]  ; go next
                      [:3 :!Copen_bracket :Browsers]    ; go backward
                      [:4 :!Cclose_bracket :Browsers]   ; go forward
                      [:b :!SCb :Browsers]            ; hide/show bookmark bar

                      [:b :!Cb :VSCode]               ; Toggle Activity Bar
                      [:d :!Oq :VSCode]               ; Toggle panel
                      [:s :!Cbackslash :VSCode]       ; Toggle sidebar
                      [:1 :!Tpage_up :VSCode]         ; show previous tab
                      [:2 :!Tpage_down :VSCode]       ; show next tab
                      [:3 :!CS7 :VSCode]              ; Toogle Line Comments

                      [:1 :!CSopen_bracket :iTerm2]   ; show previous tab
                      [:2 :!CSclose_bracket :iTerm2]  ; show next tab
                      [:s :!CSl :Typora]              ; Toggle Sidebar
                      [:s :!COs :ForkLift]            ; Toggle Sidebar (ForkLift)

                      ; Universal
                      [:1 :!TStab]                    ; show previous tab
                      [:2 :!Ttab]                     ; show next tab
                      [:a :!!a]                       ; Add item to 2Do (2Do)
                      [:d :!OCd]                      ; hide/show dock
                      [:f :!TCf]                      ; full screen
                      [:m :!COm]                      ; Autotype password (MacPass)
                      [:p :!COTp]                     ; Show picker (Sip)
                      [:t :!!t]                       ; Show/Hide iTerm2
                      ;[:t [:!Ot [:open "/Applications/iTerm.app"]]]  ; open terminal in ubuntu
                      [:w :!Ow]                       ; resize & move windows (Moom)
                      [:grave_accent_and_tilde :launchpad]            ; launchpad
                      [:tab :mission_control]                         ; mission control
                      [:comma [:open "/Applications/System Preferences.app"]]
                      [:backslash :mute]                              ; mute
                      [:open_bracket :volume_down]                    ; volume down
                      [:close_bracket :volume_up]                     ; volume up
                      [:!Oopen_bracket :!OSvolume_down]               ; 1/4 volume down
                      [:!Oclose_bracket :!OSvolume_up]                ; 1/4 volume up
                      ]}
          { :des "2do-Space-mode [inside 2do]"
            :rules  [ :2do-Space-mode
                      [:i [:!Cup_arrow]]             ; list up
                      [:k [:!Cdown_arrow]]           ; list down
                      [:h [:!Ck]]                    ; hide/show scheduled
                      ;[:i [:!C0]]                   ; inbox
                      [:l [:!TSCn]]                  ; add selection to checklist
                      [:a [:!C1]]                    ; all
                      [:t [:!C2]]                    ; today
                      [:s [:!C3]]                    ; stared
                      [:v [:!C4]]                    ; scheduled
                      [:d [:!C5]]                    ; done
                      ]}
          { :des "Symbol-P-Mode"
            :rules  [ :Symbol-P-Mode
                      ;[:comma ["period-comma-mode" 1] nil {:alone :comma :afterup ["period-comma-mode" 0]}]
                      [:h [:!Sgrave_accent_and_tilde :slash]]         ; ~/  home
                      [:j [:spacebar :hyphen :!Speriod :spacebar]]    ; ->  right arrow
                      [:t [:spacebar :!St :!So :!Sd :!So :!Ssemicolon :spacebar]] ; TODO:
                      [:s [:period :!S8]]            ; *
                      [:w [:!Sslash]]                ; ?
                      ; [:e :!Sopen_bracket]           ; {
                      ; [:r :!Sclose_bracket]          ; }
                      ; [:d :open_bracket]             ; [
                      ; [:f :close_bracket]            ; ]
                      ; [:c :!S9]                      ; (
                      ; [:v :!S0]                      ; )
                      ]}
          #_{ :des "caps_lock-mode [map to ctrl]"
            :rules  [ :caps_lock-mode
                      [:a :!Ta]                     ; ctrl a, start of sentence
                      [:c :!Tc]                     ; ctrl c
                      [:d :!Td]                     ; ctrl d
                      [:e :!Te]                     ; ctrl e, end of sentence
                      [:k :!Tk]                     ; ctrl k, delete to the end
                      [:w :!Tw]                     ; ctrl w, delete the word before cursor
                      [:r :!Tr]                     ; ctrl r, search history
                      ]}
          #_{ :des "Vimium-Mode"
            :rules  [
                      [:!CSi ["vimium" 1]]                            ; enter Vimium mode
                      [:tab [:escape ["vimium" 0]] ["vimium" 1]]      ; exit Vimium mode
                      ;[:button1 [:button1 ["vimium" 0]] ["vimium" 1]]   ; TODO: Why this doesn't work?
                      [:j :up_arrow ["vimium" 1]]
                      [:k :down_arrow ["vimium" 1]]
                      [:h :left_arrow ["vimium" 1]]
                      [:l :right_arrow ["vimium" 1]]
                      ]}
          #_{ :des "Vi Visual Mode [V as Trigger Key]"
            :rules  [ :vi-visual-mode
                      [:d :delete_or_backspace]
                      [:##j :!Sdown_arrow]
                      [:##k :!Sup_arrow]
                      [:##h :!Sleft_arrow]
                      [:##l :!Sright_arrow]
                      [:##b :!SOleft_arrow]
                      [:##w :!SOright_arrow]
                      [:##0 :!SCleft_arrow]
                      [:##4 :!SCright_arrow]
                      [:##open_bracket :!SOup_arrow ]
                      [:##close_bracket :!SOdown_arrow]
                      ]}
          #_{ :des "window move"
            :rules  [ :tmux-windmove-mode
                      [:comma [:!Tq :comma]]
                      [:open_bracket [:!Tq :open_bracket]]
                      [:y [:!Tq :y]]
                      [:f [:!Tq :f]]
                      [:e [:!Tq :e]]
                      [:w [:!Tq :w]]
                      [:h [:!Tq :h]]
                      [:j [:!Tq :j]]
                      [:k [:!Tq :k]]
                      [:l [:!Tq :l]]
                      [:v [:!Tq :v]]
                      [:s [:!Tq :s]]
                      [:m [:!Tq :z]]
                      [:b [:!Tq :x]]
                      [:c [:!Tq :c]]
                      [:1 [:!Tq :1]]
                      [:2 [:!Tq :2]]
                      [:3 [:!Tq :3]]
                      [:4 [:!Tq :4]]
                      [:5 [:!Tq :5]]]}
          { :des "Whether pressed alone?"
            :rules  [
                      [:##left_shift :##left_shift nil {:alone :right_shift}]   ; switch input source
                      ; [:grave_accent_and_tilde {:grave_accent_and_tilde :lazy} nil {:alone :!SOgrave_accent_and_tilde}]
                      ;[:##grave_accent_and_tilde :##grave_accent_and_tilde nil {:alone :!SOgrave_accent_and_tilde}]
                                                                            ; force inputting accent sign under chinese input methods
                      ;[:tab {:tab :lazy} nil {:alone :escape}]             ; tab -> escape/hyper(⌘⌥⌃⇧)
                      ;[:caps_lock {:f20 :lazy} nil {:alone :escape}]        ; caps_lock -> ⌃/escape; under effect of caps_lock-mode
                      [:caps_lock :left_control nil {:alone [:escape ["vimium" 0]]}] ; escape && jump out of inputting
                      ]}
                      ]

  :devices        {
                    :macbook-internal [{:product_id 635 :vendor_id 1452}]
                    :ikbc             [{:vendor_id 394 :product_id 1241}]
                    }
  :applications   {
                    :2do        [ "^com\\.guidedways\\.TodoMac" ]
                    :Safari     [ "^com\\.apple\\.Safari$"  ]
                    :Chrome     [ "^com\\.google\\.Chrome$"
                                  "^com\\.google\\.Chrome\\.canary$"]
                    :Browsers   [ "^org\\.mozilla\\.firefox$"
                                  "^com\\.google\\.Chrome$"
                                  "^com\\.google\\.Chrome\\.canary$"
                                  "^com\\.apple\\.Safari$"  ]
                    :Finder     [ "^com\\.apple\\.finder$"  ]
                    :ForkLift   [ "^com\\.binarynights\\.ForkLift-3"]
                    ;:irreader   [ "^com\\.netqon\\.likefeeder$" ]
                    :iCal       [ "^com\\.apple\\.iCal"]
                    :iTerm2     [ "^com\\.googlecode\\.iterm2"]
                    :Spotify    [ "^com\\.google\\.Chrome\\.app\\.Default-pjibgclleladliembfgfagdaldikeohf"]
                    :Preview    [ "^com\\.apple\\.Preview"  ]
                    :Terminals  [ "^com\\.apple\\.Terminal$"
                                  "^com\\.googlecode\\.iterm2$"
                                  "^co\\.zeit\\.hyperterm$"
                                  "^co\\.zeit\\.hyper$"
                                  "^io\\.alacritty$"
                                  "^net\\.kovidgoyal\\.kitty$"  ]
                    :Typora     [ "^abnerworks\\.Typora$"]
                    :VSCode     [ "^com\\.microsoft\\.VSCode$"]
                    :vim-mode-disabled-application
                                [ "^com\\.apple\\.Terminal$"
                                  "^com\\.googlecode\\.iterm2$"
                                  "^co\\.zeit\\.hyperterm$"
                                  "^co\\.zeit\\.hyper$"
                                  "^io\\.alacritty$"
                                  "^net\\.kovidgoyal\\.kitty$"
                                  "^org\\.vim\\."
                                  "^com\\.qvacua\\.VimR$" ]
                    }
  :input-sources  {
                    :sogou  { :input_mode_id "com.sogou.inputmethod.pinyin"
                              :input_source_id "com.sogou.inputmethod.sogou.pinyin"
                              :language "zh-Hans"}
                    :us     { :input_mode_id ""
                              :input_source_id "com.apple.keylayout.ABC"
                              :language "en"}
                    }}
